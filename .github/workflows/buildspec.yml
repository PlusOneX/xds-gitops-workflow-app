name: ExpressJS API CI/CD pipeline.
on: [push]
permissions:
  contents: read

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME }}

# This workflow will build a Node.js project, run tests (if any), and then publish a Docker image to Amazon ECR.
# For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/ECR_on_EKS.html
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '18.x'
    - name: Install dependencies
      run: npm install
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '18.x'
    - name: Install dependencies
      run: npm install
    - name: Run tests
      run: npm test

  package_docker_image:
    name: Docker & ECR repository
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build and push
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
        docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }} .
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }}

  update_configuration:
    name: Update manifest repository
    runs-on: ubuntu-latest
    needs: package_docker_image
    steps:
    - name: Triggers update of manifests repository
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PAT }}
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: 'PlusOneX',
            repo: 'xds-gitops-workflow-config',
            workflow_id: 'values.yaml',
            ref: 'main',
            inputs: {
              message: '${{ steps.git-message.outputs.message }}',
              image: '$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }}',
              sha: '${{ steps.git-sha.outputs.sha }}'
            }
          })
